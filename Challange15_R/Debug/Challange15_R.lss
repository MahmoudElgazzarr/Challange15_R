
Challange15_R.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000322  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000322  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a62  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076e  00000000  00000000  00000eba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000061b  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00001c44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000482  00000000  00000000  00001dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036e  00000000  00000000  00002242  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000025b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 03 01 	jmp	0x206	; 0x206 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <main>
  74:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_SetPinDirection>:
pindirection = 1 output
pindirection = 0 input
*/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
		if(PinNum >= 0 && PinNum < 8 )
  7c:	88 30       	cpi	r24, 0x08	; 8
  7e:	28 f5       	brcc	.+74     	; 0xca <DIO_SetPinDirection+0x4e>
		{
			if(PinDirection== 1)
  80:	61 30       	cpi	r22, 0x01	; 1
  82:	81 f4       	brne	.+32     	; 0xa4 <DIO_SetPinDirection+0x28>
			{
				Set_Bit( DDRA , PinNum);
  84:	9a b3       	in	r25, 0x1a	; 26
  86:	21 e0       	ldi	r18, 0x01	; 1
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	08 2e       	mov	r0, r24
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_SetPinDirection+0x16>
  8e:	22 0f       	add	r18, r18
  90:	33 1f       	adc	r19, r19
  92:	0a 94       	dec	r0
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_SetPinDirection+0x12>
  96:	29 2b       	or	r18, r25
  98:	2a bb       	out	0x1a, r18	; 26
			if(PinDirection== 0)
			{
				Clear_Bit( DDRA , PinNum);
			}
		}
		if(PinNum > 7 && PinNum < 16)
  9a:	98 ef       	ldi	r25, 0xF8	; 248
  9c:	98 0f       	add	r25, r24
  9e:	98 30       	cpi	r25, 0x08	; 8
  a0:	d0 f0       	brcs	.+52     	; 0xd6 <DIO_SetPinDirection+0x5a>
  a2:	3e c0       	rjmp	.+124    	; 0x120 <DIO_SetPinDirection+0xa4>
		{
			if(PinDirection== 1)
			{
				Set_Bit( DDRA , PinNum);
			}
			if(PinDirection== 0)
  a4:	61 11       	cpse	r22, r1
  a6:	8c c0       	rjmp	.+280    	; 0x1c0 <DIO_SetPinDirection+0x144>
			{
				Clear_Bit( DDRA , PinNum);
  a8:	9a b3       	in	r25, 0x1a	; 26
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	08 2e       	mov	r0, r24
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_SetPinDirection+0x3a>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	0a 94       	dec	r0
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_SetPinDirection+0x36>
  ba:	20 95       	com	r18
  bc:	29 23       	and	r18, r25
  be:	2a bb       	out	0x1a, r18	; 26
			}
		}
		if(PinNum > 7 && PinNum < 16)
  c0:	98 ef       	ldi	r25, 0xF8	; 248
  c2:	98 0f       	add	r25, r24
  c4:	98 30       	cpi	r25, 0x08	; 8
  c6:	d0 f0       	brcs	.+52     	; 0xfc <DIO_SetPinDirection+0x80>
  c8:	81 c0       	rjmp	.+258    	; 0x1cc <DIO_SetPinDirection+0x150>
  ca:	98 ef       	ldi	r25, 0xF8	; 248
  cc:	98 0f       	add	r25, r24
  ce:	98 30       	cpi	r25, 0x08	; 8
  d0:	38 f5       	brcc	.+78     	; 0x120 <DIO_SetPinDirection+0xa4>
		{
			if(PinDirection== 1)
  d2:	61 30       	cpi	r22, 0x01	; 1
  d4:	89 f4       	brne	.+34     	; 0xf8 <DIO_SetPinDirection+0x7c>
			{
				Set_Bit( DDRB , (PinNum-8));
  d6:	47 b3       	in	r20, 0x17	; 23
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	98 ef       	ldi	r25, 0xF8	; 248
  de:	98 0f       	add	r25, r24
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <DIO_SetPinDirection+0x6a>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	9a 95       	dec	r25
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <DIO_SetPinDirection+0x66>
  ea:	24 2b       	or	r18, r20
  ec:	27 bb       	out	0x17, r18	; 23
			if(PinDirection== 0)
			{
				Clear_Bit( DDRB , (PinNum-8));
			}
		}
		if(PinNum > 15 && PinNum < 24)
  ee:	90 ef       	ldi	r25, 0xF0	; 240
  f0:	98 0f       	add	r25, r24
  f2:	98 30       	cpi	r25, 0x08	; 8
  f4:	d8 f0       	brcs	.+54     	; 0x12c <DIO_SetPinDirection+0xb0>
  f6:	3f c0       	rjmp	.+126    	; 0x176 <DIO_SetPinDirection+0xfa>
		{
			if(PinDirection== 1)
			{
				Set_Bit( DDRB , (PinNum-8));
			}
			if(PinDirection== 0)
  f8:	61 11       	cpse	r22, r1
  fa:	12 c0       	rjmp	.+36     	; 0x120 <DIO_SetPinDirection+0xa4>
			{
				Clear_Bit( DDRB , (PinNum-8));
  fc:	97 b3       	in	r25, 0x17	; 23
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	48 ef       	ldi	r20, 0xF8	; 248
 104:	48 0f       	add	r20, r24
 106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_SetPinDirection+0x90>
 108:	22 0f       	add	r18, r18
 10a:	33 1f       	adc	r19, r19
 10c:	4a 95       	dec	r20
 10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_SetPinDirection+0x8c>
 110:	20 95       	com	r18
 112:	29 23       	and	r18, r25
 114:	27 bb       	out	0x17, r18	; 23
			}
		}
		if(PinNum > 15 && PinNum < 24)
 116:	90 ef       	ldi	r25, 0xF0	; 240
 118:	98 0f       	add	r25, r24
 11a:	98 30       	cpi	r25, 0x08	; 8
 11c:	d0 f0       	brcs	.+52     	; 0x152 <DIO_SetPinDirection+0xd6>
 11e:	5c c0       	rjmp	.+184    	; 0x1d8 <DIO_SetPinDirection+0x15c>
 120:	90 ef       	ldi	r25, 0xF0	; 240
 122:	98 0f       	add	r25, r24
 124:	98 30       	cpi	r25, 0x08	; 8
 126:	38 f5       	brcc	.+78     	; 0x176 <DIO_SetPinDirection+0xfa>
		{
			if(PinDirection== 1)
 128:	61 30       	cpi	r22, 0x01	; 1
 12a:	89 f4       	brne	.+34     	; 0x14e <DIO_SetPinDirection+0xd2>
			{
				Set_Bit( DDRC , (PinNum-16));
 12c:	44 b3       	in	r20, 0x14	; 20
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	90 ef       	ldi	r25, 0xF0	; 240
 134:	98 0f       	add	r25, r24
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_SetPinDirection+0xc0>
 138:	22 0f       	add	r18, r18
 13a:	33 1f       	adc	r19, r19
 13c:	9a 95       	dec	r25
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_SetPinDirection+0xbc>
 140:	24 2b       	or	r18, r20
 142:	24 bb       	out	0x14, r18	; 20
			{
				Clear_Bit( DDRC , (PinNum-16));
			}
		}
		
		if(PinNum > 24 && PinNum < 32)
 144:	97 ee       	ldi	r25, 0xE7	; 231
 146:	98 0f       	add	r25, r24
 148:	97 30       	cpi	r25, 0x07	; 7
 14a:	d8 f0       	brcs	.+54     	; 0x182 <DIO_SetPinDirection+0x106>
 14c:	08 95       	ret
		{
			if(PinDirection== 1)
			{
				Set_Bit( DDRC , (PinNum-16));
			}
			if(PinDirection== 0)
 14e:	61 11       	cpse	r22, r1
 150:	12 c0       	rjmp	.+36     	; 0x176 <DIO_SetPinDirection+0xfa>
			{
				Clear_Bit( DDRC , (PinNum-16));
 152:	94 b3       	in	r25, 0x14	; 20
 154:	21 e0       	ldi	r18, 0x01	; 1
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	40 ef       	ldi	r20, 0xF0	; 240
 15a:	48 0f       	add	r20, r24
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_SetPinDirection+0xe6>
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	4a 95       	dec	r20
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_SetPinDirection+0xe2>
 166:	20 95       	com	r18
 168:	29 23       	and	r18, r25
 16a:	24 bb       	out	0x14, r18	; 20
			}
		}
		
		if(PinNum > 24 && PinNum < 32)
 16c:	97 ee       	ldi	r25, 0xE7	; 231
 16e:	98 0f       	add	r25, r24
 170:	97 30       	cpi	r25, 0x07	; 7
 172:	b8 f0       	brcs	.+46     	; 0x1a2 <DIO_SetPinDirection+0x126>
 174:	08 95       	ret
 176:	97 ee       	ldi	r25, 0xE7	; 231
 178:	98 0f       	add	r25, r24
 17a:	97 30       	cpi	r25, 0x07	; 7
 17c:	88 f5       	brcc	.+98     	; 0x1e0 <DIO_SetPinDirection+0x164>
		{
			if(PinDirection== 1)
 17e:	61 30       	cpi	r22, 0x01	; 1
 180:	71 f4       	brne	.+28     	; 0x19e <DIO_SetPinDirection+0x122>
			{
				Set_Bit( DDRD , (PinNum-24));
 182:	41 b3       	in	r20, 0x11	; 17
 184:	88 51       	subi	r24, 0x18	; 24
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	b9 01       	movw	r22, r18
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_SetPinDirection+0x116>
 18e:	66 0f       	add	r22, r22
 190:	77 1f       	adc	r23, r23
 192:	8a 95       	dec	r24
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_SetPinDirection+0x112>
 196:	cb 01       	movw	r24, r22
 198:	84 2b       	or	r24, r20
 19a:	81 bb       	out	0x11, r24	; 17
 19c:	08 95       	ret
			}
			if(PinDirection== 0)
 19e:	61 11       	cpse	r22, r1
 1a0:	1f c0       	rjmp	.+62     	; 0x1e0 <DIO_SetPinDirection+0x164>
			{
				Clear_Bit( DDRD , (PinNum-24));
 1a2:	41 b3       	in	r20, 0x11	; 17
 1a4:	88 51       	subi	r24, 0x18	; 24
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	b9 01       	movw	r22, r18
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_SetPinDirection+0x136>
 1ae:	66 0f       	add	r22, r22
 1b0:	77 1f       	adc	r23, r23
 1b2:	8a 95       	dec	r24
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_SetPinDirection+0x132>
 1b6:	cb 01       	movw	r24, r22
 1b8:	80 95       	com	r24
 1ba:	84 23       	and	r24, r20
 1bc:	81 bb       	out	0x11, r24	; 17
			}
		}
}
 1be:	08 95       	ret
			if(PinDirection== 0)
			{
				Clear_Bit( DDRA , PinNum);
			}
		}
		if(PinNum > 7 && PinNum < 16)
 1c0:	98 ef       	ldi	r25, 0xF8	; 248
 1c2:	98 0f       	add	r25, r24
 1c4:	98 30       	cpi	r25, 0x08	; 8
 1c6:	08 f4       	brcc	.+2      	; 0x1ca <DIO_SetPinDirection+0x14e>
 1c8:	97 cf       	rjmp	.-210    	; 0xf8 <DIO_SetPinDirection+0x7c>
 1ca:	aa cf       	rjmp	.-172    	; 0x120 <DIO_SetPinDirection+0xa4>
			if(PinDirection== 0)
			{
				Clear_Bit( DDRB , (PinNum-8));
			}
		}
		if(PinNum > 15 && PinNum < 24)
 1cc:	90 ef       	ldi	r25, 0xF0	; 240
 1ce:	98 0f       	add	r25, r24
 1d0:	98 30       	cpi	r25, 0x08	; 8
 1d2:	08 f4       	brcc	.+2      	; 0x1d6 <DIO_SetPinDirection+0x15a>
 1d4:	bc cf       	rjmp	.-136    	; 0x14e <DIO_SetPinDirection+0xd2>
 1d6:	cf cf       	rjmp	.-98     	; 0x176 <DIO_SetPinDirection+0xfa>
			{
				Clear_Bit( DDRC , (PinNum-16));
			}
		}
		
		if(PinNum > 24 && PinNum < 32)
 1d8:	97 ee       	ldi	r25, 0xE7	; 231
 1da:	98 0f       	add	r25, r24
 1dc:	97 30       	cpi	r25, 0x07	; 7
 1de:	f8 f2       	brcs	.-66     	; 0x19e <DIO_SetPinDirection+0x122>
 1e0:	08 95       	ret

000001e2 <main>:

int main(void)
{
	/*Set Pin Direction For Tx and Rx*/
	
	DIO_SetPinDirection(PIN24,INPUT);
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	88 e1       	ldi	r24, 0x18	; 24
 1e6:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN25,OUTPUT);
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	89 e1       	ldi	r24, 0x19	; 25
 1ee:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
	
	/*Initalize USART*/
	USART_Init(9600);
 1f2:	60 e8       	ldi	r22, 0x80	; 128
 1f4:	75 e2       	ldi	r23, 0x25	; 37
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 42 01 	call	0x284	; 0x284 <USART_Init>
	
	while (1)
	{
		USART_Transmit('A');
 1fe:	81 e4       	ldi	r24, 0x41	; 65
 200:	0e 94 51 01 	call	0x2a2	; 0x2a2 <USART_Transmit>
 204:	fc cf       	rjmp	.-8      	; 0x1fe <main+0x1c>

00000206 <__vector_10>:
void set_Callback_Function(void (*ptr)(void))
{
	Pointer_To_Func = ptr;
}
ISR(TIMER0_COMP_vect)
{
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	2f 93       	push	r18
 212:	3f 93       	push	r19
 214:	4f 93       	push	r20
 216:	5f 93       	push	r21
 218:	6f 93       	push	r22
 21a:	7f 93       	push	r23
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
 220:	af 93       	push	r26
 222:	bf 93       	push	r27
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
	Tick++;
 228:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 22c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 236:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	if (OS_Tick_in_Timer == Tick)
 23a:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <OS_Tick_in_Timer>
 23e:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <OS_Tick_in_Timer+0x1>
 242:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 246:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 24a:	28 17       	cp	r18, r24
 24c:	39 07       	cpc	r19, r25
 24e:	49 f4       	brne	.+18     	; 0x262 <__vector_10+0x5c>
	{
		/*Call Back Function*/
		Pointer_To_Func();
 250:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <Pointer_To_Func>
 254:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <Pointer_To_Func+0x1>
 258:	09 95       	icall
		/*Set Tick To Zero*/
		Tick = ZERO;
 25a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 25e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
 262:	ff 91       	pop	r31
 264:	ef 91       	pop	r30
 266:	bf 91       	pop	r27
 268:	af 91       	pop	r26
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	7f 91       	pop	r23
 270:	6f 91       	pop	r22
 272:	5f 91       	pop	r21
 274:	4f 91       	pop	r20
 276:	3f 91       	pop	r19
 278:	2f 91       	pop	r18
 27a:	0f 90       	pop	r0
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <USART_Init>:
#include "Types.h" 
#include "UART.h"
#include "Config_UART.h"

void USART_Init( uint32 baud )
{
 284:	0f 93       	push	r16
 286:	1f 93       	push	r17
	/* Set baud rate */
	UBRRH_REG = (uint8)(baud>>8);
 288:	07 2f       	mov	r16, r23
 28a:	18 2f       	mov	r17, r24
 28c:	29 2f       	mov	r18, r25
 28e:	33 27       	eor	r19, r19
 290:	00 bd       	out	0x20, r16	; 32
	UBRRL_REG = (uint8)baud;
 292:	69 b9       	out	0x09, r22	; 9
	/* Enable receiver and transmitter */
	UCSRB_REG = (1<<RXEN)|(1<<TXEN);
 294:	88 e1       	ldi	r24, 0x18	; 24
 296:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC_REG = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
 298:	8e e8       	ldi	r24, 0x8E	; 142
 29a:	80 bd       	out	0x20, r24	; 32
}
 29c:	1f 91       	pop	r17
 29e:	0f 91       	pop	r16
 2a0:	08 95       	ret

000002a2 <USART_Transmit>:

void USART_Transmit( uint8 data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA_REG & (1<<UDRE)) )
 2a2:	55 9b       	sbis	0x0a, 5	; 10
 2a4:	fe cf       	rjmp	.-4      	; 0x2a2 <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR_REG = data;
 2a6:	8c b9       	out	0x0c, r24	; 12
 2a8:	08 95       	ret

000002aa <_exit>:
 2aa:	f8 94       	cli

000002ac <__stop_program>:
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <__stop_program>
