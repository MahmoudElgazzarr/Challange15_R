
Challange15_R.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000174  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000672  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a1  00000000  00000000  000008a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026c  00000000  00000000  00000e43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  000010b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000359  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000100  00000000  00000000  000014b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000015b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

//#include <avr/io.h>


int main(void)
{
  7c:	ff cf       	rjmp	.-2      	; 0x7c <main>

0000007e <__vector_10>:
void set_Callback_Function(void (*ptr)(void))
{
	Pointer_To_Func = ptr;
}
ISR(TIMER0_COMP_vect)
{
  7e:	1f 92       	push	r1
  80:	0f 92       	push	r0
  82:	0f b6       	in	r0, 0x3f	; 63
  84:	0f 92       	push	r0
  86:	11 24       	eor	r1, r1
  88:	2f 93       	push	r18
  8a:	3f 93       	push	r19
  8c:	4f 93       	push	r20
  8e:	5f 93       	push	r21
  90:	6f 93       	push	r22
  92:	7f 93       	push	r23
  94:	8f 93       	push	r24
  96:	9f 93       	push	r25
  98:	af 93       	push	r26
  9a:	bf 93       	push	r27
  9c:	ef 93       	push	r30
  9e:	ff 93       	push	r31
	Tick++;
  a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  a4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	if (OS_Tick_in_Timer == Tick)
  b2:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <OS_Tick_in_Timer>
  b6:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <OS_Tick_in_Timer+0x1>
  ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  be:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  c2:	28 17       	cp	r18, r24
  c4:	39 07       	cpc	r19, r25
  c6:	49 f4       	brne	.+18     	; 0xda <__vector_10+0x5c>
	{
		/*Call Back Function*/
		Pointer_To_Func();
  c8:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <Pointer_To_Func>
  cc:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <Pointer_To_Func+0x1>
  d0:	09 95       	icall
		/*Set Tick To Zero*/
		Tick = ZERO;
  d2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  d6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
  da:	ff 91       	pop	r31
  dc:	ef 91       	pop	r30
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	7f 91       	pop	r23
  e8:	6f 91       	pop	r22
  ea:	5f 91       	pop	r21
  ec:	4f 91       	pop	r20
  ee:	3f 91       	pop	r19
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
